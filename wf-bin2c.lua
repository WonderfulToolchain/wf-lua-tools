#!/opt/wonderful/bin/wf-lua
lfs = require('lfs')
lapp = require('pl.lapp')
path = require('pl.path')

---- Utility functions

--- Convert a string into a valid C identifier.
-- The following rules are used:
-- 1. Any character which is not alphanumeric is turned into an underscore.
-- 2. If the string starts with a number, an additional underscore is appended.
function to_c_identifier(s)
  s = s:gsub("[^a-zA-Z0-9_]", "_")
  if not s:sub(1, 1):match("[_a-zA-Z]") then
    s = "_" .. s
  end
  return s
end

---- Program

local args = lapp [[
wf-bin2c: convert binary file to .c/.h file pair
  -a,--align      (optional number)   Data alignment.
  --address-space (optional string)   Address space (for wswan target).
  <output_dir>    (string)            Output directory.
  <input_file>    (string)            Input binary file (use '-' for stdin).
  <array_name>    (optional string)   Array name.
]]

--- open input file

if args.input_file == '-' then
  lfs.setmode(io.stdin, "binary")
  input_file = io.stdin
else
  input_file = lapp.open(args.input_file, "rb")
end

--- generate names

local array_name, output_path, output_path_ext
if args.array_name then
  array_name = args.array_name
  output_path = array_name
  output_path_ext = ""
else
  if args.input_file == '-' then
    lapp.error("must provide array name if reading from stdin")
  else
    array_name = path.splitext(path.basename(args.input_file))
    output_path, output_path_ext = path.splitext(path.basename(args.input_file))
  end
end
array_name = to_c_identifier(array_name)

output_path = path.join(args.output_dir, output_path)
if #output_path_ext > 0 then
  output_path = output_path .. "_" .. output_path_ext:sub(2)
end

--- write files

local input_data = input_file:read("*all")
input_file:close()

local current_date = os.date()
local c_file <close> = lapp.open(output_path .. ".c", "w")
local h_file <close> = lapp.open(output_path .. ".h", "w")
local c_values_per_line <const> = 12

h_file:write("// autogenerated by wf-bin2c on " .. current_date .. "\n\n")
h_file:write("#pragma once\n#include <stdint.h>\n\n")
h_file:write("#define " .. array_name .. "_size (" .. #input_data .. ")\n")
h_file:write("extern const uint8_t ")
if args.address_space then
  h_file:write(args.address_space .. " ")
end
h_file:write(array_name .. "[" .. #input_data .. "];\n")

c_file:write("// autogenerated by wf-bin2c on " .. current_date .. "\n\n")
c_file:write("#include <stdint.h>\n\n")
c_file:write("const uint8_t ")
if args.address_space then
  c_file:write(args.address_space .. " ")
end
c_file:write(array_name .. "[" .. #input_data .. "] ")
if args.align then
  c_file:write("__attribute__((aligned(" .. args.align .. "))) ")
end
c_file:write("= {");
for i = 1, #input_data do
  i_line = i % c_values_per_line
  if i_line == 1 then
    c_file:write("\n\t")
  else
    c_file:write(" ")
  end
  c_file:write(string.format("0x%02X", input_data:byte(i)))
  if i < #input_data then
    c_file:write(",")
  end
end
c_file:write("\n};\n");