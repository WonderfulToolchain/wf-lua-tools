-- SPDX-License-Identifier: MIT
-- SPDX-FileContributor: Adrian "asie" Siekierka, 2023

local path = require('pl.path')
local tablex = require('pl.tablex')
local utils = require('pl.utils')
local toml = require('toml')
local wfmath = require('wf.internal.math')
local wfpath = require('wf.internal.path')
local wfutil = require('wf.internal.util')
local wswan = require('wf.internal.platform.wswan')

local tool_fix = require('wf.internal.tool.gbatool.fix')

local function romlink_call_linker(linkscript_filename, output_elf, output_file, linker_args)
    local success, code = execute_verbose(
        wfpath.executable('arm-none-eabi-gcc', 'toolchain/gcc-arm-none-eabi'),
        table.pack("-T", linkscript_filename, "-o", output_elf, table.unpack(linker_args))
    )
    if not success then
        error('ld exited with error code: ' .. code)
    end

    local success, code = execute_verbose(
        wfpath.executable('arm-none-eabi-objcopy', 'toolchain/gcc-arm-none-eabi'),
        table.pack("-O", "binary", output_elf, output_file)
    )
    if not success then
        error('objcopy exited with error code: ' .. code)
    end
end

local function rom_write_linkscript(f, parent_name, config)
    f:write([[
/* automatically generated by wf-gbatool on ]] .. os.date() .. [[ */
INCLUDE ]] .. parent_name .. [[
]])

    -- TODO: support IWRAM overlays
end

local function romlink_run(args, linker_args)
    local config = toml.decodeFromFile(args.config or "wfconfig.toml")
    local parent_filename = "link-rom.ld"
    if args.subtarget == "multiboot" then
        parent_filename = "link-multiboot.ld"
    end

    -- generate linkscript
    local linkscript_filename = temp_dir:path("link.ld")
    local linkscript_file = io.open(linkscript_filename, "w")
    rom_write_linkscript(linkscript_file, parent_filename, config)
    linkscript_file:close()

    -- run "arm-none-eabi-ld", "arm-none-eabi-objcopy"
    romlink_call_linker(linkscript_filename, args.output_elf or temp_dir:path("a.out.elf"), args.output, linker_args)

    -- run "wf-gbatool fix"
    -- TODO: remove .gba file if this fails
    local tool_fix_args = tablex.copy(args)
    tool_fix_args.input_file = args.output
    tool_fix.run(tool_fix_args)
end

return {
    ["arguments"] = [[
[args...] -- <linker args...>: link a GBA target ROM
  -c,--config   (optional string)  Configuration file name;
                                   wfconfig.toml is used by default.
  -o,--output   (string)           Output ROM file name.
  --output-elf  (optional string)  Output ELF file name;
                                   only stored on request.
  -v,--verbose                     Enable verbose logging.
  <subtarget>   (string)           Subtarget: "rom" or "multiboot".
]],
    ["argument_separator"] = "--",
    ["description"] = "link a GBA target ROM",
    ["run"] = romlink_run
}
